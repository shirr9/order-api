services:
  db:
    image: postgres:16
    container_name: order-api-db
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
    ports:
      - "5432:${POSTGRES_PORT}"
    volumes:
      - data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

#  create_user:
#    image: postgres:16
#    container_name: order-api-user
#    env_file:
#      - .env
#    environment:
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#      - POSTGRES_DB=${POSTGRES_DB}
#      - POSTGRES_HOST=${POSTGRES_HOST}
##      - DATABASE_URL=postgres://postgres:postgres@order-api-db:5432/db?sslmode=disable
#    command: bash -c "apt-get update && apt-get install -y git && chmod +x /migrate.sh && /migrate.sh"
#    volumes:
#      - ./db/migrations/script/migrate.sh:/migrate.sh
#    depends_on:
#      db:
#        condition: service_healthy

  migrator:
    image: migrate/migrate:4
    container_name: order-api-migrator
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
#      USER_URL: "postgres://user:password@order-api-db:5432/db?sslmode=disable"
    command: [ "-database", "${DATABASE_URL}",
               "-path", "/tables",
               "up"]
    volumes:
      - ./db/migrations/tables:/tables
    depends_on:
      db:
        condition: service_healthy
#      create_user:
#        condition: service_completed_successfully

volumes:
  data:
#command: >
#  sh -c 'migrate -database ${DATABASE_URL} -path /migrations_new_user up &&
#         migrate -database ${USER_URL} -path /migrations up'
  #
  #command: ["-database", "${DATABASE_URL}",
  #              "-path", "/migrations",
  #              "up"]

  #    command: >
  #      sh -c 'migrate -database ${URL} -path /migrations/new_user up &&
  #      migrate -database ${DATABASE_URL} -path /migrations up'

#  command: >
#    sh -c 'migrate -database ${DATABASE_URL} -path /migrations/new_user up &&
#           migrate -database ${USER_URL} -path /migrations up'