services:
  app:
    build: .
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=order-api-db
      - REDIS_HOST=order-api-redis
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      kafka:
        condition: service_started

  frontend:
    image: nginx:alpine
    ports:
      - "8081:80"
    volumes:
      - ./index.html:/usr/share/nginx/html/index.html
    depends_on:
      - app

  db:
    image: postgres:16
    container_name: order-api-db
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
    ports:
      - "5432:${POSTGRES_PORT}"
    volumes:
      - data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  create_user:
    image: postgres:latest
    env_file: ./.env
    environment:
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - DB_PORT=${POSTGRES_PORT}
      - DB_HOST=${POSTGRES_HOST}
      - NEW_USER=${NEW_USER}
      - NEW_USER_PASSWORD=${NEW_USER_PASSWORD}
    volumes:
      - ./create_user.sh:/create_user.sh
    command: bash -c "chmod +x /create_user.sh && /create_user.sh"
    restart: no
    depends_on:
      db:
        condition: service_healthy

  migrator:
    image: migrate/migrate:4
    container_name: order-api-migrator
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      USER_URL: ${USER_URL}
    command: [ "-database", "${USER_URL}",
               "-path", "/migrations",
               "up"]
    volumes:
      - ./db/migrations:/migrations
    restart: no
    depends_on:
      db:
        condition: service_healthy
      create_user:
        condition: service_completed_successfully


  redis:
    image: redis:7-alpine
    container_name: order-api-redis
    ports:
      - "${REDIS_PORT}:6379"
    env_file:
      - .env
    environment:
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis:/data
    command:
      - redis-server
      - --requirepass ${REDIS_PASSWORD}
      - --maxmemory 100mb
      - --maxmemory-policy allkeys-lru
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9094:9094"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

volumes:
  data:
  redis: